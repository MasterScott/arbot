#!/usr/bin/python

import pprint
import json
from ethchain import EthChain
from poloniex import Poloniex
from nicehash import Nicehash
from nanopool import Nanopool
from etherscan import Etherscan
from bittrex import Bittrex

pp = pprint.PrettyPrinter(indent=4)

authDbFn = 'auth.json'
authDb = None
db = {
	'cache': {}
}

# TODO: doesn't work for some reason
class DecimalEncoder(json.JSONEncoder):
    def _iterencode(self, o, markers=None):
        if isinstance(o, Decimal):
            # wanted a simple yield str(o) in the next line,
            # but that would mean a yield on the line with super(...),
            # which wouldn't work (see my comment below), so...
            return (str(o) for o in [o])
        return super(DecimalEncoder, self)._iterencode(o, markers)

def cacheData(key, value):
	db['cache'][key] = value

def queryData():
	chainEth = EthChain()
	stats = chainEth.basic_stats()
	cacheData('chain.ETH.stats', stats)

	exchPolo = Poloniex()
	ticker = exchPolo.ticker()
	cacheData('ticker', ticker)

	nh = Nicehash()
	balance = nh.balance(authDb)
	cacheData('nh.balance', balance['result'])

	algoList = [ '20' ]
	for algo in algoList:
		for locationN in xrange(2):
			location = str(locationN)
			orders = nh.orders(location, algo)
			myOrders = nh.myOrders(authDb, location, algo)

			cacheKey = 'nh.markets.' + algo + '.' + location
			cacheData(cacheKey, orders['result'])

			cacheKey = 'nh.markets.' + algo + '.' + location + '.my'
			cacheData(cacheKey, myOrders['result'])

	poolNano = Nanopool()
	balance = poolNano.balance(authDb['nanopool']['address'])
	cacheData('nanopool.balance', balance)

	es = Etherscan()
	balance = es.balance(authDb['nanopool']['address'],
			     authDb['etherscan']['apikey'])
	cacheData('chain.ETH.balance', balance)

	eb = Bittrex()
	balances = eb.balances(authDb)
	cacheData('bittrex.balances', balances)

def readConfig():
	global authDb
	with open(authDbFn) as data_file:
		authDb = json.load(data_file)

def writeDb():
	with open('db.json', 'w') as outfile:
		json.dump(db, outfile, indent=2, sort_keys=True, cls=DecimalEncoder)

def main():
	readConfig()
	queryData()
	writeDb()

if __name__ == '__main__':
	main()

