#!/usr/bin/python

import pprint
import json
import argparse
import logging
import sys
from decimal import Decimal, ROUND_FLOOR, getcontext
from ethchain import EthChain
from poloniex import Poloniex
from nicehash import Nicehash
from nanopool import Nanopool
from etherscan import Etherscan
from bittrex import Bittrex

pp = pprint.PrettyPrinter(indent=4)

logFn = 'log.arbot'
LOGFORMAT = "%(asctime)s %(message)s"
logging.basicConfig(filename=logFn, level=logging.DEBUG, format=LOGFORMAT)

dbFn = 'db.json'
authDbFn = 'auth.json'
configFn = 'config.json'

parser = argparse.ArgumentParser(prog='myprogram')
parser.add_argument('--cache', action='store_true', default=False,
		    help='Use existing ' + dbFn + '.  Do not query remotes for data')
parser.add_argument('--dryrun', action='store_true', default=False,
		    help='Do not actually create/update orders')
args = parser.parse_args()
 
getcontext().prec = 18

syscfg = None
authDb = None
db = {}

# TODO: doesn't work for some reason
class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Decimal):
            return float(o)
        return super(DecimalEncoder, self).default(o)

def decimalstr(d):
	s = '{0:f}'.format(d)
	return s

def getDb(key):
	if key not in db:
		return None

	return db[key]

def putDb(key, value):
	db[key] = value

def getPool(currency, geoloc):
	pools = syscfg['pools']
	for poolName in pools:
		pool = syscfg['pools'][poolName]
		for endpt in pool['endpoints']:
			if ((endpt['currency'] == currency) and
			    (endpt['geoloc'] == geoloc)):
				retobj = {
					'host': endpt['host'],
					'port': endpt['port'],
					'user': pool['user'],
					'pass': pool['pass'],
					'speed_limit': pool['speed_limit'],
				}
				return retobj

	return None

def queryData():
	chainEth = EthChain()
	stats = chainEth.basic_stats()
	putDb('chain.ETH.stats', stats)

	exchPolo = Poloniex()
	ticker = exchPolo.ticker()
	putDb('ticker', ticker)

	nh = Nicehash(authDb)
	balance = nh.balance()
	if not balance:
		sys.exit("no NH balance")
	putDb('nh.balance', balance['result'])

	for algo in syscfg['nicehash']['algoList']:
		for locationN in xrange(2):
			location = str(locationN)
			orders = nh.orders(algo, location)
			myOrders = nh.myOrders(algo, location)

			cacheKey = 'nh.markets.' + algo + '.' + location
			putDb(cacheKey, orders['result'])

			cacheKey = 'nh.markets.' + algo + '.' + location + '.my'
			putDb(cacheKey, myOrders['result'])

	poolNano = Nanopool()
	balance = poolNano.balance(authDb['nanopool']['address'])
	putDb('nanopool.balance', balance)

	es = Etherscan()
	balance = es.balance(authDb['nanopool']['address'],
			     authDb['etherscan']['apikey'])
	putDb('chain.ETH.balance', balance)

	eb = Bittrex()
	balances = eb.balances(authDb)
	putDb('bittrex.balances', balances)

def calcChainStats():
	ethstats = getDb('chain.ETH.stats')
	blocks = ethstats['data']['blocks']

	diffSum = Decimal(0)
	blockTimeSum = Decimal(0)

	for block in blocks:
		blockTimeSum = blockTimeSum + Decimal(block['blockTime'])
		diffSum = diffSum + Decimal(block['difficulty'])

	nBlocks = Decimal(len(blocks))
	blockTimeAvgDec = blockTimeSum / nBlocks
	blockTimeAvg = blockTimeAvgDec.to_integral_exact(rounding=ROUND_FLOOR)
	diffAvg = diffSum / nBlocks

	nethashGH = diffAvg / blockTimeAvg / Decimal('1e9')

	personalGH = Decimal(1)
	secstoGH = nethashGH / personalGH * blockTimeAvg
	daystoGH = secstoGH / Decimal(24 * 60 * 60)
	etherPerDay = Decimal(5) / daystoGH

	finalcalc = {
		'blocksAvgd': nBlocks,
		'blockTimeAvg': blockTimeAvg,
		'difficulty': diffAvg,
		'nethashGH': nethashGH,
		'daystoGH': daystoGH,
		'perDay': etherPerDay,
	}

	putDb('chain.ETH.calc', finalcalc)

def calcPrices():
	ticker = getDb('ticker')
	finalcalc = getDb('chain.ETH.calc')

	prices = {}
	prices['priceBTCETH'] = Decimal(ticker['BTC_ETH']['last'])
	prices['mktBTCGH'] = finalcalc['perDay'] * prices['priceBTCETH']

	startBTC = Decimal('1.0')
	prices['startBalance'] = startBTC
	prices['feeNH'] = (startBTC * Decimal(0.03)) + Decimal(0.0001)
	prices['feeExch'] = (startBTC * Decimal(0.0025))
	prices['feePool'] = (startBTC * Decimal(0.01))
	prices['feeChain'] = Decimal(0.0001) + Decimal(0.0001)
	prices['netBalance'] = (prices['startBalance'] -
				prices['feeNH'] -
				prices['feeExch'] -
				prices['feePool'] -
				prices['feeChain'])

	prices['goalBTC'] = prices['startBalance']
	prices['goalETH'] = prices['goalBTC'] / prices['priceBTCETH']
	prices['goalGHD'] = prices['goalETH'] / finalcalc['perDay']
	prices['breakEven'] = prices['netBalance'] / prices['goalGHD']

	prices['pct1'] = prices['breakEven'] * Decimal('0.99')
	prices['pct2'] = prices['breakEven'] * Decimal('0.98')
	prices['pct3'] = prices['breakEven'] * Decimal('0.97')
	prices['pct4'] = prices['breakEven'] * Decimal('0.96')
	prices['pct5'] = prices['breakEven'] * Decimal('0.95')
	prices['pct10'] = prices['breakEven'] * Decimal('0.90')

	putDb('chain.BTCETH.prices', prices)

def haveOpenOrders(algo, location):
	cacheKey = 'nh.markets.' + algo + '.' + location + '.my'
	orders = getDb(cacheKey)['orders']
	return (len(orders) > 0)

def orderCmp(a, b):
	priceA = float(a['price'])
	priceB = float(b['price'])
	if (priceA != priceB):
		if (priceA < priceB):
			return 1	# reverse sort
		return -1		# reverse sort

	return a['workers'] - b['workers']

def liveOrders(algo, location):
	cacheKey = 'nh.markets.' + algo + '.' + location
	orders = getDb(cacheKey)['orders']
	live = []
	for order in orders:
		if ((order['alive']) and
		    (order['type'] == 0) and
		    (order['workers'] > 0)):
			live.append(order)

	live.sort(cmp=orderCmp)

	return live

def findBestPrice(algo, location):
	orders = liveOrders(algo, location)
	leastOrders = orders[-4:]
	price = Decimal(leastOrders[0]['price'])

	return price

def adjustOrders(algo, location):
	cacheKey = 'nh.markets.' + algo + '.' + location + '.my'
	myOrders = getDb(cacheKey)['orders']
	order = myOrders[0]
	bestPrice = findBestPrice(algo, location)

	res = None
	nh = Nicehash(authDb)

	# are we paying too much?  reduce price.
	if bestPrice < Decimal(order['price']):
		logging.info("Decision: paying too much; attempt to decrease price")
		if args.dryrun:
			logging.info("NOT dec'ing order - dryrun")
			return

		res = nh.orderPriceDec(algo, location, order['id'], bestPrice)
		if res:
			logging.info("Order dec'd successfully", extra=res)
		else:
			logging.info("Order dec failed")

	# are we out of workers?  increase order price to best price w/ workers
	elif order['workers'] == 0:
		logging.info("Decision: out of workers; increase to price " + str(bestPrice))
		if args.dryrun:
			logging.info("NOT inc'ing order - dryrun")
			return

		res = nh.orderPriceInc(algo, location, order['id'], bestPrice)
		if res:
			logging.info("Order inc'd successfully", extra=res)
		else:
			logging.info("Order inc failed")

	# leave order as-is
	else:
		logging.info("Decision: no adjustment action")

def createNewOrders(algo, location):
	# Calculate best price
	bestPrice = findBestPrice(algo, location)
	key = 'bestPrice.' + algo + "." + location
	putDb(key, bestPrice)

	# Get previously calculated prices and bid boundaries
	prices = getDb('chain.BTCETH.prices')
	minReqPrice = prices['pct3']

	# Test: is there a good price on the market?
	if bestPrice > minReqPrice:
		logging.info("Decision: no order; market price too high (" + str(bestPrice) + " > " + str(minReqPrice) + ")")
		return

	# Test: do we have enough balance?
	balance = Decimal((getDb('nh.balance')['balance_confirmed']))
	minBalanceReq = Decimal(syscfg['nicehash']['minOrderBalance'])
	if balance < minBalanceReq:
		logging.info("Decision: no order; balance too low (" + decimalstr(balance) + " < " + decimalstr(minBalanceReq) + ")")
		return

	newOrderSpend = Decimal(syscfg['nicehash']['newOrderSpend'])
	if newOrderSpend > balance:
		newOrderSpend = balance

	logging.info("Decision: Bid " + decimalstr(bestPrice) + ", Spend " + decimalstr(newOrderSpend))

	pool = getPool('ETH', Nicehash.toLocation[location])
	if not pool:
		sys.exit("Configuration error; pool lookup failed")

	callopts = {
		'location': location,
		'algo': algo,
		'amount': newOrderSpend,
		'price': bestPrice,
		'limit': pool['speed_limit'],
		'pool_host': pool['host'],
		'pool_port': pool['port'],
		'pool_user': pool['user'],
		'pool_pass': pool['pass'],
	}

	if args.dryrun:
		logging.info("NOT creating order - dryrun", extra=callopts)
		return

	nh = Nicehash(authDb)
	res = nh.createOrder(callopts)
	if not res:
		sys.exit("Nicehash error; order create failed")

	logging.info("Order created successfully.", extra=res)

def makeOrders():
	for algo in syscfg['nicehash']['algoList']:
		for locationN in xrange(2):
			location = str(locationN)
			if haveOpenOrders(algo, location):
				adjustOrders(algo, location)
			else:
				createNewOrders(algo, location)

def readConfig():
	global authDb
	with open(authDbFn) as data_file:
		authDb = json.load(data_file)

	global syscfg
	with open(configFn) as data_file:
		syscfg = json.load(data_file)

def readDb():
	global db
	with open(dbFn) as data_file:
		db = json.load(data_file)

def writeDb():
	with open(dbFn, 'w') as outfile:
		json.dump(db, outfile, indent=2, sort_keys=True, cls=DecimalEncoder)

def main():
	readConfig()

	if args.cache:
		logging.info("Reading cached data")
		readDb()
	else:
		logging.info("Querying fresh data")
		queryData()

	calcChainStats()
	calcPrices()
	makeOrders()
	writeDb()

if __name__ == '__main__':
	main()

